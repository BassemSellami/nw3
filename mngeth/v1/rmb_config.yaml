# Configuration YAML

##############################################################################
#                             SEC 1. Python
# NOTE: all YAML parameters are stored in variable conf as a Python dictionary
# NOTE: rmb_conf.py reads the YAML file and parses arguments to native Python types (e.g. null -> None).
# NOTE: rmb_conf.py preprocess parameters before sending to main.py, so add extra checking/parsing there.
##############################################################################

##############################################################################
#                     Mininet Topology Configurations

# nw_topo specifies the "shape" of Mininet topology.
# There are four default topologies and our program (see ex. 1-4),
# and our program supports customized topology (see ex. 5).
# also see https://github.com/mininet/mininet/blob/master/mininet/topo.py
# also see https://github.com/mininet/mininet/wiki/Introduction-to-Mininet#setting-performance-parameters

# ex. 1
nw_topo:
  class: SingleSwitchTopo
  args:
    - 4 # number of hosts
# ex. 1.1 (equivalent to ex. 1)
#nw_topo:
#  class: SingleSwitchTopo
#  kwargs: {
#    k: 5 # number of hosts
#  }

# ex. 2
#nw_topo:
#  class: LinearTopo
#  args:
#    - 5 # number of switches
#    - 1 # number of hosts per switch
# ex. 2.1 (equivalent to ex. 3)
#nw_topo:
#  class: LinearTopo
#  kwargs: {
#    k: 5, # number of switches
#    n: 2 # number of hosts per switch
#  }

# ex. 3
#nw_topo:
#  class: TreeTopo
#  args:
#    - 3 # depth
#    - 2 # fanout
# ex. 3.1 (equivalent to ex. 3)
#nw_topo:
#  class: TreeTopo
#  kwargs: {
#    depth: 3 # depth
#    fanout: 2 # fanout
#  }

# ex. 4
#nw_topo:
#  class: FatTreeTopo
#  args:
#    - 3 # core
#    - 3 # aggregate
#    - 5 # edge
#    - 1 # hosts / edge
# ex. 4.1 (equivalent to ex. 3)
#nw_topo:
#  class: FatTreeTopo
#  kwargs: {
#    c: 3, # core
#    a: 3, # aggregate
#    e: 5, # edge
#    h: 1 # hosts / edge
#  }

# ex. 5 (should be defined in rmb_topos.py or a file imported by rmb_topos.py)
#nw_topo:
#  class: SingleSwitchTopoSlowH1
#  args:
#    - 5
#    - 1
#  kwargs: {
#    param1: True,
#    param2: null
#  }

# run iperf test(s) after network initialization
# -1: no iperf test
#  0: run a test from the first host (host-1) to the last host (host-n, n = # of hosts)
#  1: run (n-1)^2 tests between each pair of hosts
nw_iperf_mode: -1

# following parameters in this section works on four default topologies.
# However, specified values can be referenced by variable conf
# and then be utilized by customized topologies

# Each Mininet node/host is a CPULimitedHost, which by
# default does not impose any constraint on a host's
# use of computing resources. These parameters work
# for all hosts, use the Python script to setup parameters
# for a specific host.

# full parameters see
# http://mininet.org/api/classmininet_1_1node_1_1CPULimitedHost.html#details

nw_node_param:
  # desired overall system CPU fraction
  # -1: no limit
  cpu: -1  # default: -1
  # (real) core(s) this host can run on
  cores: null # default: null

# Each Mininet link (i.e. a network wire) is of the type
# mininet.link.TCIntf (traffic control link), which by
# default does not impose any constraints or add any artifacts.
# These parameters work for all links, use the Python script
# to setup parameters for a specific link.

# full parameters see
# http://mininet.org/api/classmininet_1_1link_1_1TCIntf.html#details
# also see
# https://github.com/mininet/mininet/wiki/Introduction-to-Mininet#setting-performance-parameters
# example 1:
nw_link_param:
  # bandwidth in Mbits/sec.
  bw: null  # default: null (i.e. no limit)
  # transmit delay. e.g. 1us, 500ms, 1s.
#  delay: 20ms #  default: null (i.e. no delay)

# example 2:
# limited bandwidth with artificial delay, packet loss, and packet jitter
#network_link_param:
#  bw: 1000
#  delay: 5ms
#  loss: 10
#  jitter: 1ms
##############################################################################